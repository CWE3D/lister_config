# Z height macros

# temp.cfg
# Details on what these values are:

# probe_to_nozzle_offset
# This is the offset of the probe from the nozzle.
# It is used to calculate the true height of the bed.
# It is saved in the printer.save_variables.variables.get('probe_to_nozzle_offset', printer.configfile.settings['probe']['z_offset']|float)

# probed_max_z_height
# This is the maximum height of the bed.
# It is used to calculate the true height of the bed.
# It is saved in the printer.save_variables.variables.get('probed_max_z_height', 0)|float

[gcode_macro CALIBRATE_Z_HEIGHT]
description: Main macro to run full Z height calibration
gcode:
    {% set EXPECTED_MAX = printer.configfile.settings['stepper_z']['position_max']|float %}
    
    PLAY_SOUND SOUND=calibrate_z_height
    BED_MESH_CLEAR
    
    # First calculate the true height without any adjustments
    Z_HEIGHT_PROBE
    G4 P500
    MEASURE_Z_HEIGHT
    G4 P500  # Small delay to ensure save completes
    
    # Now get the newly calculated true height from MEASURE_Z_HEIGHT
    {% set probed_max_z_height = printer.save_variables.variables.get('probed_max_z_height')|float %}
    
    # Verify we got the correct height
    {% if probed_max_z_height == EXPECTED_MAX %}
        RESPOND TYPE=warning MSG="Warning: probed_max_z_height not updated correctly, still at default value"
        RESPOND MSG="Measured height not saved correctly"
    {% endif %}
    
    {% set adjusted_true_height = probed_max_z_height - saved_z_offset %}  # Subtract because positive offset means less true height
    
    # Save the adjusted true height and verify
    SAVE_VARIABLE VARIABLE=probed_max_z_height VALUE={adjusted_true_height}
    G4 P100  # Small delay to ensure save completes
    
    # Verify the final save
    {% set final_height = printer.save_variables.variables.get('probed_max_z_height')|float %}
    {% if final_height != adjusted_true_height %}
        RESPOND TYPE=error MSG="Error: Failed to save adjusted height. Expected: {adjusted_true_height}, Got: {final_height}"
    {% endif %}
    
    RESPOND MSG="Z height calibration complete - Base height: {probed_max_z_height}, Adjusted for offset ({saved_z_offset}): {adjusted_true_height}"
    
    G28 Z F3000 # Home Z after calibration

[gcode_macro Z_HEIGHT_PROBE]
description: Perform Z homing and probing
gcode:
    RESPOND MSG="Starting Z height calibration - Probing stage"
    RESET_SAVED_Z_OFFSET  # Reset any saved z-offset adjustments
    MAYBE_HOME

    G90    # Absolute positioning
    G1 X0 Y-15 Z20 F3000  # Move to center of bed and slightly up
    PROBE X=0 Y=-15 # Perform probing
    RESPOND MSG="Probing complete"

[gcode_macro MEASURE_Z_HEIGHT]
description: Calculate and set Z height based on probing
gcode:
    PLAY_SOUND SOUND=measuring_z_height
    # Get probe offset
    # Retrieve the saved probe Z offset from saved variables if it exists, otherwise use the default value from the configuration file
    {% set saved_probe_to_nozzle_offset = printer.save_variables.variables.get('probe_to_nozzle_offset', printer.configfile.settings['probe']['z_offset']|float) %}
    {% if saved_probe_to_nozzle_offset is not none %}
        {% set probe_to_nozzle_offset = saved_probe_to_nozzle_offset|float %}
        RESPOND MSG="Using saved probe Z offset: {probe_to_nozzle_offset}"
    {% else %}
        {% set probe_to_nozzle_offset = printer.configfile.settings['probe']['z_offset']|float %}
        RESPOND MSG="No saved probe Z offset found, using config value: {probe_to_nozzle_offset}"
    {% endif %}

    {% set EXPECTED_MAX = printer.configfile.settings['stepper_z']['position_max']|float %}
    {% set MEASURED_Z = printer.probe.last_z_result %}
    {% set CALCULATED_OFFSET = MEASURED_Z - probe_to_nozzle_offset %}
    {% set probed_max_z_height = EXPECTED_MAX - CALCULATED_OFFSET %}

    # Get current count and increment it
    SET_GCODE_VARIABLE MACRO=Lister VARIABLE=park_z VALUE={probed_max_z_height}

    # Save the true max height and verify it was saved correctly
    SAVE_VARIABLE VARIABLE=probed_max_z_height VALUE={probed_max_z_height}
    G4 P500  # Small delay to ensure save completes
    
    # Verify the save
    {% set saved_height = printer.save_variables.variables.get('probed_max_z_height')|float %}
    {% if saved_height != probed_max_z_height %}
        RESPOND TYPE=error MSG="Error: Failed to save probed_max_z_height. Expected: {probed_max_z_height}, Got: {saved_height}"
    {% endif %}

    UPDATE_PARK_Z

    RESPOND MSG="True maximum Z height: {probed_max_z_height}"
    RESPOND MSG="Calibration count: { current_count + 1 }"

[gcode_macro _APPLY_SAVED_Z_HEIGHT]
description: Apply the saved true max Z height after homing
gcode:
    PLAY_SOUND SOUND=applied_saved_z_height
    {% if 'z' in printer.toolhead.homed_axes %}
        {% set saved_z = printer.save_variables.variables.get('probed_max_z_height', 0) %}
        {% if saved_z != 0 %}
            SET_Z_KINEMATIC_POSITION Z={saved_z}
            SET_GCODE_VARIABLE MACRO=Lister VARIABLE=park_z VALUE={saved_z}
            RESPOND MSG="Applied saved Z height: {saved_z}mm"
        {% else %}
            RESPOND MSG="No saved Z height found. Running calibration..."
            CALIBRATE_Z_HEIGHT
            {% set saved_z = printer.save_variables.variables.get('probed_max_z_height', 0) %}
            RESPOND MSG="Calibration complete. Applied new Z height: {saved_z}mm"
        {% endif %}
    {% else %}
        RESPOND MSG="Z axis not homed. Please home Z first."
    {% endif %}

[gcode_macro CHECK_PROBE_STATUS]
variable_monitor_active: False
variable_last_z_offset: 0
variable_check_count: 0
gcode:
    RESPOND MSG="Current probe monitoring status: {printer['gcode_macro CHECK_PROBE_STATUS'].monitor_active}"
    RESPOND MSG="Latest Z offset: {printer['gcode_macro CHECK_PROBE_STATUS'].last_z_offset}"
    RESPOND MSG="Current check probe count: {printer['gcode_macro CHECK_PROBE_STATUS'].check_count}"
    # Empty macro for storing variables

[delayed_gcode _CHECK_PROBE_CALIBRATION_STATUS]
initial_duration: 0
gcode:
    {% if printer["gcode_macro CHECK_PROBE_STATUS"].monitor_active %}
        {% set check_count = printer["gcode_macro CHECK_PROBE_STATUS"].check_count %}
        {% set pending_items = printer.configfile.save_config_pending_items %}
        {% set last_z_offset = printer["gcode_macro CHECK_PROBE_STATUS"].last_z_offset|float %}

        # Check if there are probe changes pending
        {% if pending_items and 'probe' in pending_items and 'z_offset' in pending_items.probe %}
            {% set new_offset = pending_items.probe.z_offset|float %}
            RESPOND TYPE=echo MSG="Z offset changed: {last_z_offset} -> {new_offset}"
            SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=monitor_active VALUE=False
            ; Set new offset
            SAVE_VARIABLE VARIABLE=probe_to_nozzle_offset VALUE={new_offset}
            ; G28 Z F3000 # Home Z
            CALIBRATE_Z_HEIGHT
            SAVE_CONFIG
        {% else %}
            RESPOND TYPE=echo MSG="Monitor check {check_count}: Waiting for probe calibration result..."
            SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=check_count VALUE={check_count + 1}
            UPDATE_DELAYED_GCODE ID=_CHECK_PROBE_CALIBRATION_STATUS DURATION=2
        {% endif %}
    {% endif %}

[gcode_macro PROBE_NOZZLE_DISTANCE]
description: Do a probe calibration from the middle of the bed
gcode:
    {% set initial_z_offset = printer.configfile.settings.probe.z_offset|float %}
    RESPOND TYPE=echo MSG="Starting calibration, initial Z offset: {initial_z_offset}"

    SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=monitor_active VALUE=True
    SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=last_z_offset VALUE={initial_z_offset}
    SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=check_count VALUE=0

    G28 F3000 # Home all axes first
    G90
    G1 X105 Y90 Z20 F3000
    PROBE_CALIBRATE
    UPDATE_DELAYED_GCODE ID=_CHECK_PROBE_CALIBRATION_STATUS DURATION=2

[gcode_macro CHECK_PENDING_CHANGES]
description: Check current pending configuration changes
gcode:
    {% set pending = printer.configfile.save_config_pending_items %}
    {% if pending %}
        RESPOND TYPE=echo MSG="Pending changes: {pending}"
    {% else %}
        RESPOND TYPE=echo MSG="No pending changes"
    {% endif %}

[gcode_macro PROBE_BED_MESH]
description: Do a probe calibration for a bedmesh, you can see it under HEIGHTMAP in UI.
gcode:
    PLAY_SOUND SOUND=probing_bed_mesh
    MAYBE_HOME
    G90
    G1 X105 Y90 Z20 F3000
    BED_MESH_CALIBRATE

[gcode_macro TEST_PROBE]
description: Do a probe calibration for a bedmesh, you can see it under HEIGHTMAP in UI.
gcode:
    MAYBE_HOME
    G90
    G1 X105 Y90 Z20 F3000
    PROBE_ACCURACY