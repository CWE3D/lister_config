[gcode_macro Lister]
description: Lister variable storage macro, will echo variables to the console when run.
# Configuration Defaults
variable_nozzle_pid_temp: 200
variable_bed_pid_temp: 75
variable_park_x: 5
variable_park_y: -15
variable_park_z: 240
variable_object_height: 65
variable_macro_travel_speed: 200
variable_macro_z_speed: 15
gcode:
    ECHO_LISTER_VARS
    UPDATE_PARK_Z

[gcode_macro UPDATE_PARK_Z]
description: Updates the safe parking Z height based on saved calibration
gcode:
    {% set config_max_z = printer.configfile.settings['stepper_z'].position_max|float %}
    {% set current_offset = printer.gcode_move.homing_origin.z|float %}

    # Get true_max_height if available, default to 0 if not found
    {% set true_max = printer.save_variables.variables.get('true_max_height', 0) %}

    # If we have a calibrated true_max_height (not 0), use it
    {% if true_max != 0 %}
        {% set safe_park_z = true_max %}
        RESPOND MSG="Using calibrated true_max_height for park_z"
    {% else %}
        # Fallback to existing park_z from Lister
        {% set safe_park_z = printer["gcode_macro Lister"].park_z %}
        RESPOND MSG="No calibration found, using existing park_z"
    {% endif %}

    # Update the park_z variable
    SET_GCODE_VARIABLE MACRO=Lister VARIABLE=park_z VALUE={safe_park_z}

    RESPOND MSG="Park Z height updated: {safe_park_z}mm (Based on: true_max={true_max}, config_max={config_max_z}, current_offset={current_offset})"

[gcode_macro _CALCULATE_SAFE_Z]
variable_safe_z: 240
description: Calculates a safe Z height for parking on CoreXY (Z increases as bed moves down)
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}  # For logging only
    {% set act_z = printer.toolhead.position.z|float %}
    {% set park_z = printer["gcode_macro Lister"].park_z|float %}

    # Always use park_z from Lister
    {% set safe_z = park_z %}

    SET_GCODE_VARIABLE MACRO=_CALCULATE_SAFE_Z VARIABLE=safe_z VALUE={safe_z}
    RESPOND MSG="Safe Z calculated: {safe_z}mm (current={act_z}, park_z={park_z}, max_z={max_z})"


[gcode_macro _STORE_PRINT_FILENAME]
description: Store the filename when a print starts
gcode:
    {% set file = printer.virtual_sdcard.file_path %}
    SAVE_VARIABLE VARIABLE=last_printed_file VALUE='"{file}"'
    RESPOND TYPE=echo MSG="Stored print filename: {file}"

[gcode_macro START_PRINT]
description: Start code before print.
gcode:
    PLAY_SOUND SOUND=received
    RESPOND MSG="Storing print file path in variable"
    _STORE_PRINT_FILENAME
    RESPOND MSG="Starting print preparation"
    CLEAR_PAUSE
    G90
    M220 S100 ;Reset Feedrate
    M221 S100 ;Reset Flowrate
    SAVE_GCODE_STATE NAME=start_print_state
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("PLA")|string %}
    {% set EXTRUSION_MULTIPLIER = params.EXTRUSION_MULTIPLIER|default(1)|float %}
    ; Set default temperatures based on filament type
    {% set DEFAULT_BED_TEMP = 55 %}
    {% set DEFAULT_HOTEND_TEMP = 215 %}
    {% if FILAMENT_TYPE|lower == "abs" %}
    {% set DEFAULT_BED_TEMP = 100 %}
    {% set DEFAULT_HOTEND_TEMP = 230 %}
    {% elif FILAMENT_TYPE|lower == "petg" %}
    {% set DEFAULT_BED_TEMP = 70 %}
    {% set DEFAULT_HOTEND_TEMP = 230 %}
    {% endif %}
    ; Use provided temperatures if available, otherwise use defaults
    {% set BED_TEMP = params.BED_TEMP|default(DEFAULT_BED_TEMP)|float %}
    {% set HOTEND_TEMP = params.HOTEND_TEMP|default(DEFAULT_HOTEND_TEMP)|float %}
    ; Asynchronously start heating Extruder and Bed Temperature
    RESPOND MSG="Pre-heating Extruder/Bed..."
    M140 S{BED_TEMP}
    M104 S{HOTEND_TEMP / 2}
    MAYBE_HOME
    PLAY_SOUND SOUND=chime
    G1 Z{printer["gcode_macro Lister"].object_height} X{printer["gcode_macro Lister"].park_x} Y{printer["gcode_macro Lister"].park_y} F3000 ;Move to park position
    M190 S{BED_TEMP}
    TURN_ON_LIGHT
    BED_MESH_CLEAR
    RESPOND MSG="Performing Z-tilt adjustment"
    Z_TILT_ADJUST
    PLAY_SOUND SOUND=chime
    RESPOND MSG="Calibrating bed mesh"
    BED_MESH_CALIBRATE ADAPTIVE=1

    G1 Z{printer["gcode_macro Lister"].object_height} X{printer["gcode_macro Lister"].park_x} Y{printer["gcode_macro Lister"].park_y} F3000 ;Move to park position
    RESPOND MSG="Please WAIT, bringing nozzle to temperature"
    M109 S{HOTEND_TEMP}
    PLAY_SOUND SOUND=fresh_start
    M83 ; Set extruder to relative mode
    RESPOND MSG="Purging nozzle"
    _PURGE
    M117 Printing...
    RESPOND MSG="Starting print"
    RESTORE_GCODE_STATE NAME=start_print_state
    G92 E0.0
    TURN_LOW_LIGHT

[gcode_macro CALCULATE_MAX_SPEED]
gcode:
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set extrusion_width = params.EXTRUSION_WIDTH|default(0.66)|float %}
    {% set max_flow_rate = 10 %}  # mmÂ³/s
    {% set max_speed = (max_flow_rate / (layer_height * extrusion_width)) * 60 %}  # Convert to mm/min
    SET_VELOCITY_LIMIT VELOCITY={max_speed}
    RESPOND MSG="Max print speed set to {max_speed|round(2)} mm/min for {layer_height}mm layers at {extrusion_width}mm width"

[gcode_macro END_PRINT]
description: End code after print.
gcode:
    # Optionally reset saved Z offset - comment out if you want to keep adjustments
    # RESET_SAVED_Z_OFFSET

    PLAY_SOUND SOUND=print_finished
    RESPOND MSG="Ending print"
    {% set park_x = printer["gcode_macro Lister"].park_x|float %}
    {% set park_y = printer["gcode_macro Lister"].park_y|float %}
    {% set park_z = printer["gcode_macro Lister"].park_z|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    # Get safe Z position using the new macro
    _CALCULATE_SAFE_Z
    {% set safe_z = printer["gcode_macro _CALCULATE_SAFE_Z"].safe_z %}

    RESPOND MSG="Prepping nozzle and positioning"
    G92 E5.0
    G91 ;Relative positioning
    M83 ;Relative extruder positioning. 
    G1 E-5 F720 ;Retract a bit
    G90 ;Absolute positioning

    # Move Z up a bit if it's too low
    {% if act_z < 20 %}
        G1 Z20 F1000
    {% endif %}

    # Move to park position
    RESPOND MSG="Moving to park position"
    G1 X{park_x} F3000
    G1 Y{park_y} F3000
    G1 Z{park_z} F1000

    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0

    RESPOND MSG="Turning off heaters"
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed

    RESPOND MSG="Disabling steppers"
    M84 X Y E Z ;Disable all steppers.
    M106 S0 ;Turn-off fan
    TURN_LOW_LIGHT
    PLAY_SOUND SOUND=success

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
description: Pauses the printer
variable_extrude: 1.5
variable_retract: 1.0  # Amount to retract in mm
gcode:
    PLAY_SOUND SOUND=pausing_print
    RESPOND MSG="Pausing print..."
    SAVE_GCODE_STATE NAME=PAUSE_state
    
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    {% set R = printer["gcode_macro PAUSE"].retract|float %}
    {% set speed = printer["gcode_macro Lister"].macro_travel_speed|float * 60 %}
    {% set z_speed = printer["gcode_macro Lister"].macro_z_speed|float * 60 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set park_x = printer["gcode_macro Lister"].park_x|float %}
    {% set park_y = printer["gcode_macro Lister"].park_y|float %}

    # Calculate halfway point between current Z and max Z
    {% set target_z = act_z + ((max_z - act_z) / 2) %}
    
    # Debug output
    RESPOND MSG="Current Z: {act_z}, Max Z: {max_z}, Target Z: {target_z}"

    # Handle different ways of passing boolean values
    {% set unload_filament = params.UNLOAD_FILAMENT|default('false') %}
    {% if unload_filament|lower == 'true' or unload_filament|float == 1 %}
        {% set unload_filament = true %}
    {% else %}
        {% set unload_filament = false %}
    {% endif %}

    PAUSE_BASE

    # Use absolute positioning for most movements
    G90

    # Retract filament (use relative positioning for extrusion)
    {% if printer.extruder.can_extrude|lower == 'true' %}
        RESPOND MSG="Retracting filament"
        G91
        G1 E-{R} F300
        G90
    {% else %}
        RESPOND MSG="Extruder not hot enough to retract"
    {% endif %}
    
    # Move to park position
    {% if "xyz" in printer.toolhead.homed_axes %}
        # Move Z to calculated target position
        RESPOND MSG="Moving Z to halfway position {target_z}"
        G1 Z{target_z} F{z_speed}
        
        RESPOND MSG="Moving to park position X{park_x} Y{park_y}"
        G1 X{park_x} F{speed}
        G1 Y{park_y} F{speed}
        
        # Additional retraction after parking (use relative positioning for extrusion)
        {% if printer.extruder.can_extrude|lower == 'true' %}
            RESPOND MSG="Performing additional retraction of {E}mm"
            G91
            G1 E-{E} F300
            G90
        {% endif %}
    {% else %}
        RESPOND MSG="Printer not homed, cannot park"
    {% endif %}

    TURN_ON_LIGHT

    # Unload filament if requested
    {% if unload_filament %}
        RESPOND MSG="Unloading filament"
        _UNLOAD_FILAMENT
    {% endif %}

    # Disable extruder stepper
    RESPOND MSG="Disabling extruder stepper"
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

    # Ensure we end in absolute positioning mode
    G90

    # Final position check
    RESPOND MSG="Final Z position: {printer.toolhead.position.z}"

[gcode_macro RESUME]
rename_existing: RESUME_BASE
description: Resumes the print if the printer is paused.
variable_retract: 1.0  # Amount to retract in mm
gcode:
    PLAY_SOUND SOUND=resuming_print
    RESPOND MSG="Resuming print"
    {% set speed = printer["gcode_macro Lister"].macro_travel_speed|float * 60 %}
    {% set z_speed = printer["gcode_macro Lister"].macro_z_speed|float * 60 %}
    {% set R = printer["gcode_macro RESUME"].retract|float %}
    
    # Re-enable extruder stepper
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1
    
    # Ensure absolute positioning
    G90
    M83  # Relative extruder mode
    
    # Retract
    {% if printer.extruder.can_extrude|lower == 'true' %}
        RESPOND MSG="Retracting filament {R}mm"
        G1 E-{R} F300  # Retract at slower speed
    {% else %}
        RESPOND MSG="Extruder not hot enough to retract"
    {% endif %}
    
    RESPOND MSG="Restoring PAUSE state and resuming print"
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={speed}
    TOGGLE_FILAMENT_SENSOR ENABLE=TRUE
    RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
description: Cancels the printer
gcode:
    PLAY_SOUND SOUND=canceling_print
    RESPOND MSG="Canceling print"
    END_PRINT
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    CANCEL_PRINT_BASE
    M107 ; Turn off fan
    RESPOND MSG="Print canceled"

[gcode_macro M600]
description: Filament change
gcode:
    PLAY_SOUND SOUND=requesting_filament_change
    RESPOND TYPE=command MSG='M600'
    {% if printer.pause_resume.is_paused %}
        {action_respond_info("Already paused")}
    {% elif printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        TOGGLE_FILAMENT_SENSOR ENABLE=FALSE
        PAUSE UNLOAD_FILAMENT=TRUE
        RESPOND MSG="Please change filament and resume when ready"
    {% endif %}

[gcode_macro _UNLOAD_FILAMENT]
description: Unload filament routine
gcode:
    RESPOND MSG="Starting filament unload routine, please WAIT!"

    SAVE_GCODE_STATE NAME=UNLOAD_state
    
    G90 ; Ensure absolute positioning for XYZ axes
    M83 ; Set extruder to relative mode
    
    G1 E-10 F300 ; Retract 10mm
    G1 E5 F300 ; Extrude 5mm
    G1 E-10 F300 ; Retract 10mm
    G1 E5 F300 ; Extrude 5mm
    G1 E-15 F300 ; Retract 15mm
    G1 E-2 F1000 ; Small retraction to prevent oozing
    
    RESTORE_GCODE_STATE NAME=UNLOAD_state
    
    RESPOND MSG="Filament unload complete, please WAIT!"

[gcode_macro TOGGLE_FILAMENT_SENSOR]
variable_sensor_enabled: True
gcode:
    {% if params.ENABLE|default('TRUE')|upper == 'TRUE' %}
        SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=1
        SET_GCODE_VARIABLE MACRO=TOGGLE_FILAMENT_SENSOR VARIABLE=sensor_enabled VALUE=True
        RESPOND MSG="Filament sensor enabled"
    {% else %}
        SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=0
        SET_GCODE_VARIABLE MACRO=TOGGLE_FILAMENT_SENSOR VARIABLE=sensor_enabled VALUE=False
        RESPOND MSG="Filament sensor disabled"
    {% endif %}

[gcode_macro _PURGE]
description: Purges filament to clear nozzle.
gcode:
    PLAY_SOUND SOUND=purging_filament
    SAVE_GCODE_STATE NAME=PURGE_state
    M117 Priming nozzle...
    RESPOND MSG="Priming nozzle..."
    # Calculate purge line positions based on bed size
    {% set bed_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set center_x = bed_x / 2 %}
    {% set purge_y_start = -5 %} # Set initial Y position for purge line
    {% set purge_z = 0.5 %} # Set purge height to 0.5mm
    {% set line_spacing = 0.6 %} # Set spacing between lines to 0.6mm
    # Set absolute positioning for movement and relative for extrusion
    G90 # Absolute positioning for XYZ
    M83 # Relative positioning for extruder
    # Start of actual Purge / Prime Line
    G1 Z5.0 F3000 # Move Z Axis up
    G1 X{center_x} Y{purge_y_start} F4000.0 # Move to start position (center)
    G1 Z{purge_z} F3000 # Lower to purge height
    # Draw purge lines
    G1 X{bed_x - 5} Y{purge_y_start} E15 F1500.0 # Move right while extruding
    G1 Y{purge_y_start + line_spacing} F4000.0 # Move Y by 0.5mm
    G1 X5 Y{purge_y_start + line_spacing} E30 F1500.0 # Move left while extruding
    G1 Y{purge_y_start + 2*line_spacing} F4000.0 # Move Y by another 0.5mm
    G1 X{center_x} Y{purge_y_start + 2*line_spacing} E15 F1500.0 # Move back to center while extruding
    G1 E-0.5 F3000 # Retract slightly
    G1 Z5.0 F3000 # Move Z Axis up
    G92 E0 # Reset Extruder position
    M117 Done purging nozzle.
    RESPOND MSG="Done purging nozzle."
    RESTORE_GCODE_STATE NAME=PURGE_state

[gcode_macro CALIBRATE_Z_HEIGHT]
description: Main macro to run full Z height calibration
gcode:
    {% set EXPECTED_MAX = printer.configfile.settings['stepper_z']['position_max']|float %}
    
    PLAY_SOUND SOUND=calibrate_z_height
    BED_MESH_CLEAR
    
    # Calculate the true height without any adjustments
    Z_HEIGHT_PROBE
    G4 P1000
    MEASURE_Z_HEIGHT
    
    # Get the calculated true height
    {% set base_true_height = printer.save_variables.variables.true_max_height|float %}
    
    # Save the true height
    SAVE_VARIABLE VARIABLE=true_max_height VALUE={base_true_height}
    SAVE_VARIABLE VARIABLE=calibration_count VALUE=0
    
    RESPOND MSG="Z height calibration complete - Height: {base_true_height}"
    
    G28 Z F3000 # Home Z after calibration