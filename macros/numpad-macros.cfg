[gcode_macro _GLOBALS]
variable_light_state: 0  # 0=off, 1=low, 2=full
variable_all_fans_state: 0  # 0=off, 1=on
gcode:

[gcode_macro _QUERY_SAFE_PARK_OFF]
gcode:
    PLAY_SOUND SOUND=safe_park

[gcode_macro _SAFE_PARK_OFF]
description: Safely park all axes and turn off steppers
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot park, printer is currently printing"
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: Starting safe park and disable sequence"

        # Use existing MAYBE_HOME instead of direct G28
        MAYBE_HOME

        # Calculate safe park position using the new system
        _CALCULATE_SAFE_Z
        {% set safe_z = printer["gcode_macro _CALCULATE_SAFE_Z"].safe_z %}
        {% set park_x = printer["gcode_macro Lister"].park_x %}
        {% set park_y = printer["gcode_macro Lister"].park_y %}

        # Move to safe position
        G90  # Absolute positioning
        G1 Z{safe_z} F600
        G1 X{park_x} Y{park_y} F3000

        # Use existing macro to disable steppers
        M84  # Disable all other steppers

        RESPOND TYPE=echo MSG="Numpad macros: Parked at X:{park_x} Y:{park_y} Z:{safe_z} and disabled steppers"
    {% endif %}


[gcode_macro _QUERY_CANCEL_PRINT]
gcode:
    PLAY_SOUND SOUND=cancel_print

[gcode_macro _CANCEL_PRINT]
description: Will cancel the current print
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will cancel the current print"
    CANCEL_PRINT

[gcode_macro _QUERY_DISABLE_X_Y_STEPPERS]
gcode:
    PLAY_SOUND SOUND=disable_x_y_steppers

[gcode_macro _DISABLE_X_Y_STEPPERS]
description: Disable X and Y steppers
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Disable X and Y steppers"
    DISABLE_X_Y_STEPPERS

[gcode_macro _QUERY_HOME_ALL]
gcode:
    PLAY_SOUND SOUND=home_xyz

[gcode_macro _HOME_ALL]
description: Home all axes
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Homing all axes"
    MAYBE_HOME  # Use existing macro instead of direct HOME
    RESPOND TYPE=echo MSG="Numpad macros: Homing complete"


[gcode_macro _QUERY_REPEAT_LAST_PRINT]
gcode:
    PLAY_SOUND SOUND=repeat_last_print

[gcode_macro _REPEAT_LAST_PRINT]
description: Will repeat the last print
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will repeat the last print"
    {% set last_file = printer.virtual_sdcard.file_path %}
    {% if last_file %}
        RESPOND TYPE=echo MSG="Numpad macros: Repeating print of '{last_file}'"
        CLEAR_PAUSE  # Use existing functionality
        START_PRINT  # Use your existing start print routine
        SDCARD_PRINT_FILE FILENAME="{last_file}"
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: No previous print file found"
    {% endif %}


[gcode_macro _QUERY_TOGGLE_PAUSE_RESUME]
gcode:
    PLAY_SOUND SOUND=toggle_pause_resume

[gcode_macro _TOGGLE_PAUSE_RESUME]
description: Will pause if printing, will resume if paused
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will pause if printing, will resume if paused"
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=echo MSG="Numpad macros: Print is paused - Resuming"
        RESUME  # Use your existing RESUME macro
    {% else %}
        {% if printer.virtual_sdcard.is_active %}
            RESPOND TYPE=echo MSG="Numpad macros: Print is active - Pausing"
            PAUSE  # Use your existing PAUSE macro
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: No active print"
        {% endif %}
    {% endif %}


[gcode_macro _QUERY_CALIBRATE_NOZZLE_OFFSET_PROBE]
gcode:
    PLAY_SOUND SOUND=calibrate_nozzle_offset

[gcode_macro _CALIBRATE_NOZZLE_OFFSET_PROBE]
description: Will run the calibration of nozzle offset from probe
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will run the calibration of nozzle offset from probe"
    {% set probing = printer['gcode_macro CHECK_PROBE_STATUS'].monitor_active %}
    {% if probing %}
        RESPOND TYPE=echo MSG="Numpad macros: Probe calibration already active"
        ACCEPT
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: Starting probe calibration"
        PROBE_NOZZLE_DISTANCE  # Use your existing macro
    {% endif %}

[gcode_macro _QUERY_PROBE_BED_MESH]
gcode:
    PLAY_SOUND SOUND=probe_bed_mesh

[gcode_macro _PROBE_BED_MESH]
description: Will run a probe bed mesh
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will run a probe bed mesh"
    MAYBE_HOME  # Ensure homing first
    BED_MESH_CLEAR  # Clear existing mesh
    BED_MESH_CALIBRATE ADAPTIVE=1  # Use adaptive meshing as in your START_PRINT

[gcode_macro _QUERY_BED_PROBE_MANUAL_ADJUST]
gcode:
    PLAY_SOUND SOUND=bed_probe_manual_adjust

[gcode_macro _BED_PROBE_MANUAL_ADJUST]
description: Utility to level the bed with gantry, probing ends with adjustments help
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Starting bed probe manual adjustment"
    BED_PROBE_MANUAL_ADJUST  # Use your existing macro

[gcode_macro _QUERY_PRE_HEAT_NOZZLE]
gcode:
    PLAY_SOUND SOUND=pre_heat_nozzle

[gcode_macro _PRE_HEAT_NOZZLE]
description: Toggles nozzle heater - turns it off if on, or heats to PID temp if off
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot toggle nozzle heat while printing"
    {% else %}
        {% set TEMP = printer["gcode_macro Lister"].nozzle_pid_temp %}
        {% set target_temp = printer.extruder.target %}

        {% if target_temp != 0 %}
            RESPOND TYPE=echo MSG="Numpad macros: Turning off nozzle heater (was set to {target_temp}째C)"
            M104 S0
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: Heating nozzle to {TEMP}째C"
            M104 S{TEMP}
        {% endif %}
    {% endif %}

[gcode_macro _QUERY_PRE_HEAT_BED]
gcode:
    PLAY_SOUND SOUND=pre_heat_bed

[gcode_macro _PRE_HEAT_BED]
description: Toggles bed heater - turns it off if on, or heats to PID temp if off
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot toggle bed heat while printing"
    {% else %}
        {% set TEMP = printer["gcode_macro Lister"].bed_pid_temp %}
        {% set target_temp = printer.heater_bed.target %}

        {% if target_temp != 0 %}
            RESPOND TYPE=echo MSG="Numpad macros: Turning off bed heater (was set to {target_temp}째C)"
            M140 S0
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: Heating bed to {TEMP}째C"
            M140 S{TEMP}
        {% endif %}
    {% endif %}

[gcode_macro _LED_TOGGLE]
description: Toggles the printer light between off, low, and full brightness
gcode:
    {% set state = printer['gcode_macro _GLOBALS'].light_state %}

    # Calculate next state (0->1->2->0)
    {% set new_state = (state + 1) % 3 %}

    # Set the light based on new state
    {% if new_state == 0 %}
        RESPOND MSG="Turning off light"
        SET_PIN PIN=light_led VALUE=0
    {% elif new_state == 1 %}
        RESPOND MSG="Setting light to low intensity"
        SET_PIN PIN=light_led VALUE=0.4
    {% else %}
        RESPOND MSG="Turning on light"
        SET_PIN PIN=light_led VALUE=1
    {% endif %}

    # Update state
    SET_GCODE_VARIABLE MACRO=_GLOBALS VARIABLE=light_state VALUE={new_state}

[gcode_macro _FANS_TOGGLE]
description: Toggles all fans between off and full speed
gcode:
    {% set state = printer['gcode_macro _GLOBALS'].all_fans_state %}
    {% set new_state = (state + 1) % 2 %}

    {% if new_state == 0 %}
        RESPOND MSG="Turning off all fans"
        SET_FAN_SPEED FAN=fan SPEED=0
        SET_FAN_SPEED FAN=toolhead_cooling_fan SPEED=0
        SET_FAN_SPEED FAN=controller_fan SPEED=0
    {% else %}
        RESPOND MSG="Setting all fans to full speed"
        SET_FAN_SPEED FAN=fan SPEED=1
        SET_FAN_SPEED FAN=toolhead_cooling_fan SPEED=1
        SET_FAN_SPEED FAN=controller_fan SPEED=1
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_GLOBALS VARIABLE=all_fans_state VALUE={new_state}

[gcode_macro _PRINT_FILE]
description: Start printing a specific file
gcode:
    {% set FILENAME = params.FILENAME|default('') %}

    {% if not FILENAME %}
        RESPOND TYPE=error MSG="No filename provided. Usage: PRINT_FILE FILENAME=benchy.gcode"
    {% else %}
        {% if printer.virtual_sdcard.is_active %}
            RESPOND TYPE=error MSG="Cannot start new print: Printer is currently printing"
        {% else %}
            RESPOND MSG="Starting print of {FILENAME}"
            START_PRINT  # Your existing start print routine
            SDCARD_PRINT_FILE FILENAME="{FILENAME}"
        {% endif %}
    {% endif %}

[gcode_macro _QUERY_RESTART_FIRMWARE]
gcode:
    PLAY_SOUND SOUND=restart_firmware

[gcode_macro _RESTART_FIRMWARE]
description: Safely restart the firmware after checking printer status
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Cannot restart: Printer is currently printing"
    {% elif printer.idle_timeout.state == "Printing" %}
        RESPOND TYPE=error MSG="Cannot restart: Printer is busy"
    {% else %}
        RESPOND TYPE=echo MSG="Preparing for firmware restart..."

        # Turn off all heaters
        TURN_OFF_HEATERS

        # Turn off all fans
        SET_FAN_SPEED FAN=fan SPEED=0
        SET_FAN_SPEED FAN=toolhead_cooling_fan SPEED=0
        SET_FAN_SPEED FAN=controller_fan SPEED=0

        # Disable steppers
        M84

        RESPOND TYPE=echo MSG="Restarting firmware..."
        FIRMWARE_RESTART
    {% endif %}

