[gcode_macro _GLOBALS]
variable_light_state: 0  # 0=off, 1=low, 2=full
variable_part_fan_speed: 0  # 0=off, 1=33%, 2=66%, 3=100%
variable_printer_busy: 0  # 0=normal timeout, 1=busy (no timeout)
variable_original_timeout: 600  # Store original timeout (moved from SET_PRINTER_BUSY)
gcode:

[gcode_macro _QUERY_M112]
gcode:
    RESPOND TYPE=echo MSG="Will run shutdown command M112, runtime shuts down."
    PLAY_SOUND SOUND=emergency_stop

[gcode_macro _QUERY_SAFE_PARK_OFF]
gcode:
    RESPOND TYPE=echo MSG="Safely park all axes and turn off steppers"
    PLAY_SOUND SOUND=safe_park

[gcode_macro _SAFE_PARK_OFF]
description: Safely park all axes and turn off steppers
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot park, printer is currently printing"
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: Starting safe park and disable sequence"

        # Use existing MAYBE_HOME instead of direct G28
        MAYBE_HOME

        # Calculate safe park position using the new system
        _CALCULATE_SAFE_Z
        {% set safe_z = printer["gcode_macro _CALCULATE_SAFE_Z"].safe_z %}
        {% set park_x = printer["gcode_macro Lister"].park_x %}
        {% set park_y = printer["gcode_macro Lister"].park_y %}

        # Move to safe position
        G90  # Absolute positioning
        G1 Z{safe_z} F600
        G1 X{park_x} Y{park_y} F3000

        # Use existing macro to disable steppers
        M84  # Disable all other steppers

        RESPOND TYPE=echo MSG="Numpad macros: Parked at X:{park_x} Y:{park_y} Z:{safe_z} and disabled steppers"
    {% endif %}


[gcode_macro _QUERY_CANCEL_PRINT]
gcode:
    RESPOND TYPE=echo MSG="Will cancel the current print"
    PLAY_SOUND SOUND=cancel_print

[gcode_macro _CANCEL_PRINT]
description: Will cancel the current print
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will cancel the current print"
    CANCEL_PRINT

[gcode_macro _QUERY_DISABLE_X_Y_STEPPERS]
gcode:
    RESPOND TYPE=echo MSG="Disable X and Y steppers"
    PLAY_SOUND SOUND=disable_x_y_steppers

[gcode_macro _DISABLE_X_Y_STEPPERS]
description: Disable X and Y steppers
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Disable X and Y steppers"
    DISABLE_X_Y_STEPPERS

[gcode_macro _QUERY_HOME_ALL]
gcode:
    RESPOND TYPE=echo MSG="Home all axes"
    PLAY_SOUND SOUND=home_printer

[gcode_macro _HOME_ALL]
description: Home all axes
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Homing all axes"
    MAYBE_HOME  # Use existing macro instead of direct HOME
    RESPOND TYPE=echo MSG="Numpad macros: Homing complete"

[gcode_macro _QUERY_REPEAT_LAST_PRINT]
gcode:
    RESPOND TYPE=echo MSG="Will repeat the last print"
    PLAY_SOUND SOUND=repeat_last_print

[gcode_macro _REPEAT_LAST_PRINT]
description: Will repeat the last print
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will repeat the last print"
    {% set last_file = printer.save_variables.variables.last_printed_file %}
    {% if last_file and last_file|length > 0 %}
        RESPOND TYPE=echo MSG="Numpad macros: Repeating print of {last_file}"
        CHECK_PRINTER_READY
        {% if printer["gcode_macro CHECK_PRINTER_READY"].is_ready %}
            CLEAR_PAUSE
            START_PRINT
            SDCARD_PRINT_FILE FILENAME={last_file}
        {% else %}
            RESPOND TYPE=error MSG="Printer not ready to start print"
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG="Numpad macros: No previous print file found"
    {% endif %}

[gcode_macro _QUERY_TOGGLE_PAUSE_RESUME]
gcode:
    RESPOND TYPE=echo MSG="Will pause if printing, will resume if paused"
    {% if printer.pause_resume.is_paused %}
        PLAY_SOUND SOUND=toggle_resume
    {% else %}
        {% if printer.virtual_sdcard.is_active %}
            PLAY_SOUND SOUND=toggle_pause
        {% else %}
            CHECK_PRINTER_READY
        {% endif %}
    {% endif %}

[gcode_macro _TOGGLE_PAUSE_RESUME]
description: Will pause if printing, will resume if paused
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will pause if printing, will resume if paused"
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=echo MSG="Numpad macros: Print is paused - Resuming"
        RESUME  # Use your existing RESUME macro
    {% else %}
        {% if printer.virtual_sdcard.is_active %}
            RESPOND TYPE=echo MSG="Numpad macros: Print is active - Pausing"
            PAUSE  # Use your existing PAUSE macro
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: No active print"
        {% endif %}
    {% endif %}

[gcode_macro _QUERY_CALIBRATE_NOZZLE_OFFSET_PROBE]
gcode:
    RESPOND TYPE=echo MSG="Will run the calibration of nozzle offset from probe"
    PLAY_SOUND SOUND=calibrate_nozzle_offset

[gcode_macro _CALIBRATE_NOZZLE_OFFSET_PROBE]
description: Will run the calibration of nozzle offset from probe
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will run the calibration of nozzle offset from probe"
    {% set probing = printer['gcode_macro CHECK_PROBE_STATUS'].monitor_active %}
    {% if probing %}
        RESPOND TYPE=echo MSG="Numpad macros: Probe calibration already active"
        ACCEPT
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: Starting probe calibration"
        PROBE_NOZZLE_DISTANCE  # Use your existing macro
    {% endif %}

[gcode_macro _QUERY_PROBE_BED_MESH]
gcode:
    RESPOND TYPE=echo MSG="Will run a probe bed mesh"
    PLAY_SOUND SOUND=probe_bed_mesh

[gcode_macro _PROBE_BED_MESH]
description: Will run a probe bed mesh
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will run a probe bed mesh"
    MAYBE_HOME  # Ensure homing first
    BED_MESH_CLEAR  # Clear existing mesh
    BED_MESH_CALIBRATE ADAPTIVE=1  # Use adaptive meshing as in your START_PRINT

[gcode_macro _QUERY_BED_PROBE_MANUAL_ADJUST]
gcode:
    RESPOND TYPE=echo MSG="Utility to level the bed with gantry, probing ends with adjustments help"
    PLAY_SOUND SOUND=bed_probe_manual_adjust

[gcode_macro _BED_PROBE_MANUAL_ADJUST]
description: Utility to level the bed with gantry, probing ends with adjustments help
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Starting bed probe manual adjustment"
    BED_PROBE_MANUAL_ADJUST  # Use your existing macro

[gcode_macro _QUERY_PRE_HEAT_NOZZLE]
gcode:
    RESPOND TYPE=echo MSG="Toggles nozzle heater - turns it off if on, or heats to PID temp if off"
    PLAY_SOUND SOUND=pre_heat_nozzle

[gcode_macro _PRE_HEAT_NOZZLE]
description: Toggles nozzle heater - turns it off if on, or heats to PID temp if off
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot toggle nozzle heat while printing"
    {% else %}
        {% set TEMP = printer["gcode_macro Lister"].nozzle_pid_temp %}
        {% set target_temp = printer.extruder.target %}

        {% if target_temp != 0 %}
            RESPOND TYPE=echo MSG="Numpad macros: Turning off nozzle heater (was set to {target_temp}째C)"
            M104 S0
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: Heating nozzle to {TEMP}째C"
            M104 S{TEMP}
        {% endif %}
    {% endif %}

[gcode_macro _QUERY_PRE_HEAT_BED]
gcode:
    RESPOND TYPE=echo MSG="Toggles bed heater - turns it off if on, or heats to PID temp if off"
    PLAY_SOUND SOUND=pre_heat_bed

[gcode_macro _PRE_HEAT_BED]
description: Toggles bed heater - turns it off if on, or heats to PID temp if off
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot toggle bed heat while printing"
    {% else %}
        {% set TEMP = printer["gcode_macro Lister"].bed_pid_temp %}
        {% set target_temp = printer.heater_bed.target %}

        {% if target_temp != 0 %}
            RESPOND TYPE=echo MSG="Numpad macros: Turning off bed heater (was set to {target_temp}째C)"
            M140 S0
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: Heating bed to {TEMP}째C"
            M140 S{TEMP}
        {% endif %}
    {% endif %}

[gcode_macro _LED_TOGGLE]
description: Toggles the printer light between off, low, and full brightness
gcode:
    {% set state = printer['gcode_macro _GLOBALS'].light_state %}

    # Calculate next state (0->1->2->0)
    {% set new_state = (state + 1) % 3 %}

    # Set the light based on new state
    {% if new_state == 0 %}
        RESPOND MSG="Turning off light"
        SET_PIN PIN=light_led VALUE=0
    {% elif new_state == 1 %}
        RESPOND MSG="Setting light to low intensity"
        SET_PIN PIN=light_led VALUE=0.4
    {% else %}
        RESPOND MSG="Turning on light"
        SET_PIN PIN=light_led VALUE=1
    {% endif %}

    # Update state
    SET_GCODE_VARIABLE MACRO=_GLOBALS VARIABLE=light_state VALUE={new_state}

[gcode_macro _FANS_TOGGLE]
description: Toggles part cooling fan between off and three speeds
gcode:
    {% set state = printer['gcode_macro _GLOBALS'].part_fan_speed %}
    {% set new_state = (state + 1) % 4 %}

    {% if new_state == 0 %}
        RESPOND MSG="Part cooling fan OFF"
        M106 S0
    {% elif new_state == 1 %}
        RESPOND MSG="Part cooling fan at 33%"
        M106 S{(0.33 * 255)|int}
    {% elif new_state == 2 %}
        RESPOND MSG="Part cooling fan at 66%"
        M106 S{(0.66 * 255)|int}
    {% else %}
        RESPOND MSG="Part cooling fan at 100%"
        M106 S255
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_GLOBALS VARIABLE=part_fan_speed VALUE={new_state}

[gcode_macro _PRINT_FILE]
description: Start printing a specific file
gcode:
    {% set FILENAME = params.FILENAME|default('') %}

    {% if not FILENAME %}
        RESPOND TYPE=error MSG="No filename provided. Usage: PRINT_FILE FILENAME=benchy.gcode"
    {% else %}
        {% if printer.virtual_sdcard.is_active %}
            RESPOND TYPE=error MSG="Cannot start new print: Printer is currently printing"
        {% else %}
            RESPOND MSG="Starting print of {FILENAME}"
            START_PRINT  # Your existing start print routine
            SDCARD_PRINT_FILE FILENAME="{FILENAME}"
        {% endif %}
    {% endif %}

[gcode_macro _QUERY_RESTART_FIRMWARE]
gcode:
    RESPOND TYPE=echo MSG="Safely restart the firmware after checking printer status"
    PLAY_SOUND SOUND=restart_firmware

[gcode_macro _RESTART_FIRMWARE]
description: Safely restart the firmware after checking printer status
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Cannot restart: Printer is currently printing"
    {% elif printer.idle_timeout.state == "Printing" %}
        RESPOND TYPE=error MSG="Cannot restart: Printer is busy"
    {% else %}
        RESPOND TYPE=echo MSG="Preparing for firmware restart..."

        # Turn off all heaters
        TURN_OFF_HEATERS
        M106 S0

        # Disable steppers
        M84

        RESPOND TYPE=echo MSG="Restarting firmware..."
        FIRMWARE_RESTART
    {% endif %}

[gcode_macro _QUERY_PID_TUNE_NOZZLE]
gcode:
    RESPOND TYPE=echo MSG="Run PID tuning routine for the nozzle"
    PLAY_SOUND SOUND=pid_tune_nozzle

[gcode_macro _PID_TUNE_NOZZLE]
description: Run PID tuning routine for the nozzle
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
        RESPOND TYPE=error MSG="Cannot start PID tune while printing"
    {% else %}
        RESPOND TYPE=echo MSG="Starting nozzle PID tune"
        TUNE_NOZZLE_PID
    {% endif %}

[gcode_macro _QUERY_PID_TUNE_BED]
gcode:
    RESPOND TYPE=echo MSG="Run PID tuning routine for the bed"
    PLAY_SOUND SOUND=pid_tune_bed

[gcode_macro _PID_TUNE_BED]
description: Run PID tuning routine for the bed
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
        RESPOND TYPE=error MSG="Cannot start PID tune while printing"
    {% else %}
        RESPOND TYPE=echo MSG="Starting bed PID tune"
        TUNE_BED_PID
    {% endif %}

[gcode_macro CHECK_PRINTER_READY]
description: Checks if the printer is ready for printing by verifying key conditions
variable_is_ready: False
gcode:
    {% set all_checks_passed = true %}
    {% set messages = [] %}

    # Check if printer is already printing
    {% if printer.virtual_sdcard.is_active %}
        {% set all_checks_passed = false %}
        {% set messages = messages + ["Printer is currently printing"] %}
        PLAY_SOUND SOUND=macro_in_progress
    {% endif %}

    # Check if printer is paused
    {% if printer.pause_resume.is_paused %}
        {% set all_checks_passed = false %}
        {% set messages = messages + ["Printer is currently paused"] %}
        PLAY_SOUND SOUND=printer_paused
    {% endif %}

    # Check if firmware is in error state
    {% if printer.idle_timeout.state == "Shutdown" %}
        {% set all_checks_passed = false %}
        {% set messages = messages + ["Printer is in shutdown state"] %}
        PLAY_SOUND SOUND=printer_in_error
    {% endif %}

    # Check filament sensor if configured
    {% if printer['filament_switch_sensor runout_sensor'] %}
        {% if not printer['filament_switch_sensor runout_sensor'].filament_detected %}
            {% set all_checks_passed = false %}
            {% set messages = messages + ["No filament detected"] %}
            PLAY_SOUND SOUND=no_filament_detected
        {% endif %}
        {% if not printer['gcode_macro TOGGLE_FILAMENT_SENSOR'].sensor_enabled %}
            {% set messages = messages + ["Warning: Filament sensor is disabled"] %}
        {% endif %}
    {% endif %}

    # Update ready status variable
    SET_GCODE_VARIABLE MACRO=CHECK_PRINTER_READY VARIABLE=is_ready VALUE={all_checks_passed}

    # Output results
    {% if all_checks_passed %}
        PLAY_SOUND SOUND=printer_ready
        RESPOND TYPE=echo MSG="Printer is ready for printing"
        {% if messages %}
            RESPOND TYPE=echo MSG="Warnings:"
            {% for message in messages %}
                RESPOND TYPE=echo MSG="- {message}"
            {% endfor %}
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG="Printer is not ready for printing"
        RESPOND TYPE=error MSG="Issues found:"
        {% for message in messages %}
            RESPOND TYPE=error MSG="- {message}"
        {% endfor %}
    {% endif %}

[gcode_macro _NO_ASSIGNED_MACRO]
gcode:
    {% set key = params.KEY|default("unknown")|string %}
    RESPOND TYPE=echo MSG="NO ASSIGNMENT macro for key: {key}"
    PLAY_SOUND SOUND=key_not_assigned

[gcode_macro _QUERY_TOGGLE_PRINTER_BUSY]
gcode:
    {% set state = printer['gcode_macro _GLOBALS'].printer_busy %}
    {% if state == 0 %}
        RESPOND TYPE=echo MSG="Will disable idle timeout and set printer to busy state"
    {% else %}
        RESPOND TYPE=echo MSG="Will restore previous idle timeout behavior"
    {% endif %}
    PLAY_SOUND SOUND=toggle_printer_busy

[gcode_macro _TOGGLE_PRINTER_BUSY]
description: Toggles between normal idle timeout and busy state (no timeout)
gcode:
    {% set state = printer['gcode_macro _GLOBALS'].printer_busy %}

    STATUS

    {% if state == 0 %}
        # Currently normal, switching to busy
        RESPOND MSG="Setting printer to busy state (disabling idle timeout)"
        {% set current_timeout = printer.idle_timeout.timeout|default(600)|int %}
        SET_GCODE_VARIABLE MACRO=_GLOBALS VARIABLE=printer_busy VALUE=1
        SET_IDLE_TIMEOUT TIMEOUT=1
        RESPOND MSG="Saved timeout value: {current_timeout}s"
    {% else %}
        # Currently busy, restoring previous timeout
        {% set timeout = printer.idle_timeout.timeout|default(600)|int %}
        SET_GCODE_VARIABLE MACRO=_GLOBALS VARIABLE=printer_busy VALUE=0
        SET_IDLE_TIMEOUT TIMEOUT={timeout}
        RESPOND MSG="Restored idle timeout to {timeout}s"
    {% endif %}

# Optional: Add a macro to set the default timeout
[gcode_macro SET_DEFAULT_TIMEOUT]
description: Set the default timeout value that will be restored when disabling busy mode
gcode:
    {% set timeout = params.TIMEOUT|default(600)|int %}
    SET_GCODE_VARIABLE MACRO=_GLOBALS VARIABLE=original_timeout VALUE={timeout}
    RESPOND MSG="Default timeout set to {timeout} seconds"
