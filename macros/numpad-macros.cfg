[gcode_macro _QUERY_SAFE_PARK_OFF]
gcode:
    PLAY_SOUND SOUND=safe_park

[gcode_macro _SAFE_PARK_OFF]
description: Safely park all axes and turn off steppers
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot park, printer is currently printing"
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: Starting safe park and disable sequence"

        # Use existing MAYBE_HOME instead of direct G28
        MAYBE_HOME

        # Calculate safe park position using the new system
        _CALCULATE_SAFE_Z
        {% set safe_z = printer["gcode_macro _CALCULATE_SAFE_Z"].safe_z %}
        {% set park_x = printer["gcode_macro Lister"].park_x %}
        {% set park_y = printer["gcode_macro Lister"].park_y %}

        # Move to safe position
        G90  # Absolute positioning
        G1 Z{safe_z} F600
        G1 X{park_x} Y{park_y} F3000

        # Use existing macro to disable steppers
        M84  # Disable all other steppers

        RESPOND TYPE=echo MSG="Numpad macros: Parked at X:{park_x} Y:{park_y} Z:{safe_z} and disabled steppers"
    {% endif %}


[gcode_macro _QUERY_CANCEL_PRINT]
gcode:
    PLAY_SOUND SOUND=cancel_print

[gcode_macro _CANCEL_PRINT]
description: Will cancel the current print
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will cancel the current print"
    CANCEL_PRINT

[gcode_macro _QUERY_DISABLE_X_Y_STEPPERS]
gcode:
    PLAY_SOUND SOUND=disable_x_y_steppers

[gcode_macro _DISABLE_X_Y_STEPPERS]
description: Disable X and Y steppers
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Disable X and Y steppers"
    DISABLE_X_Y_STEPPERS

[gcode_macro _QUERY_EMERGENCY_STOP]
gcode:
    PLAY_SOUND SOUND=emergency_stop

[gcode_macro _EMERGENCY_STOP]
description: Immediately halts all printer operations - USE WITH CAUTION
gcode:
    RESPOND TYPE=error MSG="!!! EMERGENCY STOP ACTIVATED !!!"
    M112  # Emergency Stop - This is immediate
    RESPOND TYPE=error MSG="All heaters, steppers, and operations stopped"

[gcode_macro _QUERY_HOME_ALL]
gcode:
    PLAY_SOUND SOUND=home_xyz

[gcode_macro _HOME_ALL]
description: Home all axes
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Homing all axes"
    MAYBE_HOME  # Use existing macro instead of direct HOME
    RESPOND TYPE=echo MSG="Numpad macros: Homing complete"


[gcode_macro _QUERY_REPEAT_LAST_PRINT]
gcode:
    PLAY_SOUND SOUND=repeat_last_print

[gcode_macro _REPEAT_LAST_PRINT]
description: Will repeat the last print
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will repeat the last print"
    {% set last_file = printer.virtual_sdcard.file_path %}
    {% if last_file %}
        RESPOND TYPE=echo MSG="Numpad macros: Repeating print of '{last_file}'"
        CLEAR_PAUSE  # Use existing functionality
        START_PRINT  # Use your existing start print routine
        SDCARD_PRINT_FILE FILENAME="{last_file}"
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: No previous print file found"
    {% endif %}


[gcode_macro _QUERY_TOGGLE_PAUSE_RESUME]
gcode:
    PLAY_SOUND SOUND=toggle_pause_resume

[gcode_macro _TOGGLE_PAUSE_RESUME]
description: Will pause if printing, will resume if paused
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will pause if printing, will resume if paused"
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=echo MSG="Numpad macros: Print is paused - Resuming"
        RESUME  # Use your existing RESUME macro
    {% else %}
        {% if printer.virtual_sdcard.is_active %}
            RESPOND TYPE=echo MSG="Numpad macros: Print is active - Pausing"
            PAUSE  # Use your existing PAUSE macro
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: No active print"
        {% endif %}
    {% endif %}


[gcode_macro _QUERY_CALIBRATE_NOZZLE_OFFSET_PROBE]
gcode:
    PLAY_SOUND SOUND=calibrate_nozzle_offset

[gcode_macro _CALIBRATE_NOZZLE_OFFSET_PROBE]
description: Will run the calibration of nozzle offset from probe
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will run the calibration of nozzle offset from probe"
    {% set probing = printer['gcode_macro CHECK_PROBE_STATUS'].monitor_active %}
    {% if probing %}
        RESPOND TYPE=echo MSG="Numpad macros: Probe calibration already active"
        ACCEPT
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: Starting probe calibration"
        PROBE_NOZZLE_DISTANCE  # Use your existing macro
    {% endif %}

[gcode_macro _QUERY_PROBE_BED_MESH]
gcode:
    PLAY_SOUND SOUND=probe_bed_mesh

[gcode_macro _PROBE_BED_MESH]
description: Will run a probe bed mesh
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Will run a probe bed mesh"
    MAYBE_HOME  # Ensure homing first
    BED_MESH_CLEAR  # Clear existing mesh
    BED_MESH_CALIBRATE ADAPTIVE=1  # Use adaptive meshing as in your START_PRINT

[gcode_macro _QUERY_BED_PROBE_MANUAL_ADJUST]
gcode:
    PLAY_SOUND SOUND=bed_probe_manual_adjust

[gcode_macro _BED_PROBE_MANUAL_ADJUST]
description: Utility to level the bed with gantry, probing ends with adjustments help
gcode:
    RESPOND TYPE=echo MSG="Numpad macros: Starting bed probe manual adjustment"
    BED_PROBE_MANUAL_ADJUST  # Use your existing macro

[gcode_macro _QUERY_PRE_HEAT_NOZZLE]
gcode:
    PLAY_SOUND SOUND=pre_heat_nozzle

[gcode_macro _PRE_HEAT_NOZZLE]
description: Toggles nozzle heater - turns it off if on, or heats to PID temp if off
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot toggle nozzle heat while printing"
    {% else %}
        {% set TEMP = printer["gcode_macro Lister"].nozzle_pid_temp %}
        {% set target_temp = printer.extruder.target %}

        {% if target_temp != 0 %}
            RESPOND TYPE=echo MSG="Numpad macros: Turning off nozzle heater (was set to {target_temp}째C)"
            M104 S0
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: Heating nozzle to {TEMP}째C"
            M104 S{TEMP}
        {% endif %}
    {% endif %}


[gcode_macro _QUERY_PRE_HEAT_BED]
gcode:
    PLAY_SOUND SOUND=pre_heat_bed

[gcode_macro _PRE_HEAT_BED]
description: Toggles bed heater - turns it off if on, or heats to PID temp if off
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot toggle bed heat while printing"
    {% else %}
        {% set TEMP = printer["gcode_macro Lister"].bed_pid_temp %}
        {% set target_temp = printer.heater_bed.target %}

        {% if target_temp != 0 %}
            RESPOND TYPE=echo MSG="Numpad macros: Turning off bed heater (was set to {target_temp}째C)"
            M140 S0
        {% else %}
            RESPOND TYPE=echo MSG="Numpad macros: Heating bed to {TEMP}째C"
            M140 S{TEMP}
        {% endif %}
    {% endif %}

[gcode_macro _HANDLE_KNOB_INPUT]
description: Smart knob control with adaptive Z adjustment for probe calibration
variable_last_z: 0
variable_min_z_step: 0.01
gcode:
    {% set direction = params.DIRECTION|lower %}  # "up" or "down"

    # Get detailed state info
    {% set probing = printer['gcode_macro CHECK_PROBE_STATUS'].monitor_active %}
    {% set printing = printer.virtual_sdcard.is_active %}
    {% set in_first_layer = printing and printer.gcode_move.position.z < 1 %}
    {% set current_z = printer.gcode_move.position.z %}

    # Detailed debug info
    RESPOND TYPE=echo MSG="State Debug:"
    RESPOND TYPE=echo MSG="- Probe Calibration Active: {probing}"
    RESPOND TYPE=echo MSG="- Printing: {printing}"
    RESPOND TYPE=echo MSG="- First Layer: {in_first_layer}"
    RESPOND TYPE=echo MSG="- Current Z: {current_z}"

    # Decision making logic
    {% if probing %}
        # Nozzle probe calibration active
        {% if direction == "up" %}
            {% if current_z < 0.1 %}
                # Use TESTZ for fine adjustments when close to the bed
                RESPOND TYPE=echo MSG="Knob: Fine adjustment - Probe Z+"
                TESTZ Z=+
            {% else %}
                # Calculate adaptive step size for upward movement
                {% set step_size = [current_z / 2, 0.01]|max %}
                RESPOND TYPE=echo MSG="Knob: Coarse adjustment up {step_size}mm"
                TESTZ Z=+{step_size}
            {% endif %}
        {% else %}  # direction is down
            {% if current_z < 0.1 %}
                # Use TESTZ for fine adjustments when close to the bed
                RESPOND TYPE=echo MSG="Knob: Fine adjustment - Probe Z-"
                TESTZ Z=-
            {% else %}
                # Calculate adaptive step size for downward movement
                {% set step_size = [current_z / 2, 0.01]|max %}
                RESPOND TYPE=echo MSG="Knob: Coarse adjustment down {step_size}mm"
                TESTZ Z=-{step_size}
            {% endif %}
        {% endif %}
        # Store last z position for next calculation
        SET_GCODE_VARIABLE MACRO=_HANDLE_KNOB_INPUT VARIABLE=last_z VALUE={current_z}

    {% elif printing %}
        {% if in_first_layer %}
            # First layer adjustment
            {% if direction == "up" %}
                RESPOND TYPE=echo MSG="Knob: First Layer Z-Offset +0.025"
                SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1
            {% else %}
                RESPOND TYPE=echo MSG="Knob: First Layer Z-Offset -0.025"
                SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1
            {% endif %}
        {% else %}
            # Print speed control
            {% set current_speed = printer.gcode_move.speed_factor * 100 %}
            {% set change = 5 %}  # 5% steps
            {% if direction == "up" %}
                RESPOND TYPE=echo MSG="Knob: Speed Factor {current_speed|float|round(1)}% -> {(current_speed + change)|float|round(1)}%"
                SET_VELOCITY_LIMIT VELOCITY_FACTOR={(current_speed + change) / 100}
            {% else %}
                RESPOND TYPE=echo MSG="Knob: Speed Factor {current_speed|float|round(1)}% -> {(current_speed - change)|float|round(1)}%"
                SET_VELOCITY_LIMIT VELOCITY_FACTOR={(current_speed - change) / 100}
            {% endif %}
        {% endif %}
    {% else %}
        # Not in any special state
        RESPOND TYPE=echo MSG="Knob: No active mode (not probing, not printing)"
    {% endif %}

[gcode_macro _KNOB_UP]
description: Smart knob up control
gcode:
    _HANDLE_KNOB_INPUT DIRECTION=UP

[gcode_macro _KNOB_DOWN]
description: Smart knob down control
gcode:
    _HANDLE_KNOB_INPUT DIRECTION=DOWN