[delayed_gcode VERSION]
initial_duration: 1
gcode:
    RESPOND MSG="Complete overhaul of the firmware configuration"
    RESPOND MSG="------------------------------------"
    RESPOND MSG="LISTER FIRMWARE CONFIG VERSION 2.8.15-RC"
    RESPOND MSG="------------------------------------"
    RESPOND MSG="Major Changes:"
    RESPOND MSG="New method to handle micro tuning of the nozzle and bed during first print"
    PLAY_SOUND SOUND=startup

[gcode_macro UPDATE_LISTER_SOFTWARE]
description: Update Lister configuration and software
gcode:
    RESPOND MSG="Updating Lister configuration and software, please wait for restart."
    UPDATE_LISTER
    VERSION
    RESPOND MSG="Updating Lister software is now complete."

[gcode_macro DISABLE_X_Y_STEPPERS]
description: Turns off X and Y steppers.
gcode:
    PLAY_SOUND SOUND=disabling_x_y_steppers
    RESPOND MSG="Disabling X and Y steppers"
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro DISABLE_EXTRUDER_STEPPER]
description: Turns off extruder stepper.
gcode:
    RESPOND MSG="Disabling extruder stepper"
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[gcode_macro BED_PROBE_MANUAL_ADJUST]
description: This will help you adjust the base for the bed with the help of a probe. It will tell you how to turn the screws at the bottom of the bed.
gcode:
    PLAY_SOUND SOUND=bed_probe_manual_adjust
    RESPOND MSG="Starting bed probe manual adjustment"
    MAYBE_HOME
    G90  # Ensure absolute positioning
    SCREWS_TILT_CALCULATE

[gcode_macro COLD_CHANGE_FILAMENT]
description: Change filament routine
variable_default_temp: 220
variable_wait_time_seconds: 0
gcode:
    {% set NOZZLE_TEMP = params.TEMP|default(default_temp)|float %}
    {% set WAIT_TIME = params.WAIT_TIME_SECONDS|default(wait_time_seconds)|float %}
    {% set WAIT_TIME_MS = WAIT_TIME * 1000 %}
    RESPOND MSG="Disable extruder stepper"
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    RESPOND MSG="Starting filament cold change routine. Heating to {NOZZLE_TEMP}°C"
    M109 S{NOZZLE_TEMP} ;
    RESPOND MSG="Nozzle at temperature, proceeding with filament change"
    RESPOND MSG="Keeping nozzle warm, waiting for {WAIT_TIME} seconds"
    G4 P{WAIT_TIME_MS} ; Wait for specified time
    M104 S0 ; Turn off the nozzle heater
    RESPOND MSG="Filament change process finished"

[gcode_macro _MOTION_ENCODER_INSERTED]
description: Handle print process after motion encoder is triggered
gcode:
    RESPOND TYPE=echo MSG="The encoder motion received a filament insert event."

[gcode_macro _FILAMENT_RAN_OUT]
description: Pause print after runout detection and perform multiple purges after filament change
variable_purge_repetitions: 8 # Default number of purge repetitions
variable_purge_distance: 100 # Default purge distance
gcode:
    # Check if the printer is currently printing
    {% if printer.idle_timeout.state == "Printing" %}
        {% set PURGE_DISTANCE = params.PURGE_DISTANCE|default(printer["gcode_macro _FILAMENT_RAN_OUT"].purge_distance)|float %}
        {% set PURGE_REPETITIONS = params.PURGE_REPETITIONS|default(printer["gcode_macro _FILAMENT_RAN_OUT"].purge_repetitions)|int %}
        {% set last_temp = printer.extruder.target %}
        # Pause the print
        PLAY_SOUND SOUND=filament_ran_out
        RESPOND MSG="Filament runout detected. Pausing print."
        PAUSE
        # Heat up the nozzle to the last target temperature
        RESPOND MSG="Heating nozzle to last target temperature: {last_temp}°C"
        RESPOND MSG="Will purge filament once last temprature is reached."
        M109 S{last_temp}
        # Perform purge operation multiple times
        RESPOND MSG="For user friendlyness make sure purge distance is not to big to purge all filament."
        RESPOND MSG="Performing purge operation {PURGE_REPETITIONS} x {PURGE_DISTANCE}mm."
        {% for i in range(PURGE_REPETITIONS) %}
            RESPOND MSG="Purge operation {i+1} of {PURGE_REPETITIONS}"
            M83 # Relative positioning
            G1 E{PURGE_DISTANCE} F500
            G1 E-2 F500 # Small retraction to prevent oozing
        {% endfor %}
        # Disable the extruder stepper
        RESPOND MSG="Disabling extruder stepper"
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
        RESPOND MSG="Complete filament change and manually purge. Presss RESUME when ready."
    {% else %}
        RESPOND MSG="Filament runout detected, but printer is not actively printing. Ignoring."
    {% endif %}

[gcode_macro _FILAMENT_INSERTED]
description: Routine to handle filament insertion
gcode:
    # Check if printer is in a paused state or if temperature is above 200°C
    {% if printer.pause_resume.is_paused or printer.extruder.temperature > 190 %}
        PLAY_SOUND SOUND=filament_inserted
        RESPOND MSG="Filament inserted during active/paused print. Continuing with insertion process."
        
        RESPOND MSG="Disabling extruder stepper"
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

        {% set last_temp = printer.extruder.target %}

        # Start heating the nozzle immediately if it's not already at temperature
        M104 S{last_temp}  # Set target temperature without waiting

        # Ensure the nozzle has reached the insertion temperature
        RESPOND MSG="Waiting for nozzle to reach insertion temperature of {INSERT_TEMP}°C"
        M109 S{last_temp}
    {% else %}
        RESPOND MSG="Cold filament insertion detected. Ignoring no macro."
    {% endif %}

    RESPOND MSG="Disengaged extruder stepper, use gear on stepper to pull filament in if needed"

[gcode_macro _MOTION_ENCODER_TRIGGERED]
description: Placeholder for motion encoder events
gcode:
    RESPOND TYPE=echo MSG="Motion encoder event received"

[gcode_macro TUNE_NOZZLE_PID]
description: Runs calibration for PID values on extruder.
gcode:
    PLAY_SOUND SOUND=tuning_hotend_pid
    {% set TARGET_TEMP = printer["gcode_macro Lister"].nozzle_pid_temp|float %}
    RESPOND MSG="Starting nozzle PID tuning at {TARGET_TEMP}°C"
    PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
    RESPOND MSG="Nozzle PID tuning complete, saving configuration"
    SAVE_CONFIG

[gcode_macro TUNE_BED_PID]
description: Runs calibration for PID values on bed.
gcode:
    PLAY_SOUND SOUND=tuning_hotbed_pid
    {% set TARGET_TEMP = printer["gcode_macro Lister"].bed_pid_temp|default(60)|float %}
    RESPOND MSG="Starting bed PID tuning at {TARGET_TEMP}°C"
    PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
    RESPOND MSG="Bed PID tuning complete, saving configuration"
    SAVE_CONFIG

[gcode_macro TURN_ON_LIGHT]
description: Turns on the printer light
gcode:
    RESPOND MSG="Turning on light"
    SET_PIN PIN=light_led VALUE=1

[gcode_macro TURN_LOW_LIGHT]
description: Sets the printer light to low intensity
gcode:
    RESPOND MSG="Setting light to low intensity"
    SET_PIN PIN=light_led VALUE=.4

[gcode_macro TURN_OFF_LIGHT]
description: Turns off the printer light
gcode:
    RESPOND MSG="Turning off light"
    SET_PIN PIN=light_led VALUE=0

[gcode_macro SAFE_PARK_OFF]
description: Safely park all axes and turn off steppers
gcode:
    {% if printer.virtual_sdcard.is_active %}
        RESPOND TYPE=error MSG="Numpad macros: Cannot park, printer is currently printing"
    {% else %}
        RESPOND TYPE=echo MSG="Numpad macros: Starting safe park and disable sequence"

        # Use existing MAYBE_HOME instead of direct G28
        MAYBE_HOME

        # Calculate safe park position using the new system
        _CALCULATE_SAFE_Z
        {% set safe_z = printer["gcode_macro _CALCULATE_SAFE_Z"].safe_z %}
        {% set park_x = printer["gcode_macro Lister"].park_x %}
        {% set park_y = printer["gcode_macro Lister"].park_y %}

        # Move to safe position
        G90  # Absolute positioning
        G1 Z{safe_z} F600
        G1 X{park_x} Y{park_y} F3000

        # Use existing macro to disable steppers
        M84  # Disable all other steppers

        RESPOND TYPE=echo MSG="Numpad macros: Parked at X:{park_x} Y:{park_y} Z:{safe_z} and disabled steppers"
    {% endif %}
