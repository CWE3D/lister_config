[delayed_gcode VERSION]
initial_duration: 1
gcode:
    RESPOND MSG="Overall performance and print quality improvements"
    RESPOND MSG="------------------------------------"
    RESPOND MSG="LISTER FIRMWARE CONFIG VERSION 1.5-STABLE"
    PLAY_SOUND SOUND=startup

[gcode_macro CHECK_PROBE_STATUS]
variable_monitor_active: False
variable_last_z_offset: 0
variable_check_count: 0
gcode:
    RESPOND MSG="Current probe monitoring status: {printer['gcode_macro CHECK_PROBE_STATUS'].monitor_active}"
    RESPOND MSG="Latest Z offset: {printer['gcode_macro CHECK_PROBE_STATUS'].last_z_offset}"
    RESPOND MSG="Current check probe count: {printer['gcode_macro CHECK_PROBE_STATUS'].check_count}"
    # Empty macro for storing variables

[delayed_gcode _CHECK_PROBE_CALIBRATION_STATUS]
initial_duration: 0
gcode:
    {% if printer["gcode_macro CHECK_PROBE_STATUS"].monitor_active %}
        {% set check_count = printer["gcode_macro CHECK_PROBE_STATUS"].check_count %}
        {% set pending_items = printer.configfile.save_config_pending_items %}
        {% set last_z_offset = printer["gcode_macro CHECK_PROBE_STATUS"].last_z_offset|float %}

        # Check if there are probe changes pending
        {% if pending_items and 'probe' in pending_items and 'z_offset' in pending_items.probe %}
            {% set new_offset = pending_items.probe.z_offset|float %}
            RESPOND TYPE=echo MSG="Z offset changed: {last_z_offset} -> {new_offset}"
            SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=monitor_active VALUE=False
            ; Set new offset
            SAVE_VARIABLE VARIABLE=probe_z_offset VALUE={new_offset}
            ; G28 Z F3000 # Home Z
            CALIBRATE_Z_HEIGHT
            SAVE_CONFIG
        {% else %}
            RESPOND TYPE=echo MSG="Monitor check {check_count}: Waiting for probe calibration result..."
            SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=check_count VALUE={check_count + 1}
            UPDATE_DELAYED_GCODE ID=_CHECK_PROBE_CALIBRATION_STATUS DURATION=2
        {% endif %}
    {% endif %}

[gcode_macro PROBE_NOZZLE_DISTANCE]
description: Do a probe calibration from the middle of the bed
gcode:
    {% set initial_z_offset = printer.configfile.settings.probe.z_offset|float %}
    RESPOND TYPE=echo MSG="Starting calibration, initial Z offset: {initial_z_offset}"

    SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=monitor_active VALUE=True
    SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=last_z_offset VALUE={initial_z_offset}
    SET_GCODE_VARIABLE MACRO=CHECK_PROBE_STATUS VARIABLE=check_count VALUE=0

    MAYBE_HOME
    G90
    G1 X105 Y90 Z20 F3000
    PROBE_CALIBRATE
    UPDATE_DELAYED_GCODE ID=_CHECK_PROBE_CALIBRATION_STATUS DURATION=2

[gcode_macro CHECK_PENDING_CHANGES]
description: Check current pending configuration changes
gcode:
    {% set pending = printer.configfile.save_config_pending_items %}
    {% if pending %}
        RESPOND TYPE=echo MSG="Pending changes: {pending}"
    {% else %}
        RESPOND TYPE=echo MSG="No pending changes"
    {% endif %}

[gcode_macro PROBE_BED_MESH]
description: Do a probe calibration for a bedmesh, you can see it under HEIGHTMAP in UI.
gcode:
    PLAY_SOUND SOUND=probing_bed_mesh
    MAYBE_HOME
    G90
    G1 X105 Y90 Z20 F3000
    BED_MESH_CALIBRATE

[gcode_macro TEST_PROBE]
description: Do a probe calibration for a bedmesh, you can see it under HEIGHTMAP in UI.
gcode:
    MAYBE_HOME
    G90
    G1 X105 Y90 Z20 F3000
    PROBE_ACCURACY

[gcode_macro DISABLE_X_Y_STEPPERS]
description: Turns off X and Y steppers.
gcode:
    PLAY_SOUND SOUND=disabling_x_y_steppers
    RESPOND MSG="Disabling X and Y steppers"
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro DISABLE_EXTRUDER_STEPPER]
description: Turns off extruder stepper.
gcode:
    RESPOND MSG="Disabling extruder stepper"
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[gcode_macro BED_PROBE_MANUAL_ADJUST]
description: This will help you adjust the base for the bed with the help of a probe. It will tell you how to turn the screws at the bottom of the bed.
gcode:
    PLAY_SOUND SOUND=bed_probe_manual_adjust
    RESPOND MSG="Starting bed probe manual adjustment"
    MAYBE_HOME
    G90  # Ensure absolute positioning
    SCREWS_TILT_CALCULATE

[gcode_macro COLD_CHANGE_FILAMENT]
description: Change filament routine
variable_default_temp: 220
variable_wait_time_seconds: 0
gcode:
    {% set NOZZLE_TEMP = params.TEMP|default(default_temp)|float %}
    {% set WAIT_TIME = params.WAIT_TIME_SECONDS|default(wait_time_seconds)|float %}
    {% set WAIT_TIME_MS = WAIT_TIME * 1000 %}
    RESPOND MSG="Disable extruder stepper"
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    RESPOND MSG="Starting filament cold change routine. Heating to {NOZZLE_TEMP}°C"
    M109 S{NOZZLE_TEMP} ;
    RESPOND MSG="Nozzle at temperature, proceeding with filament change"
    RESPOND MSG="Keeping nozzle warm, waiting for {WAIT_TIME} seconds"
    G4 P{WAIT_TIME_MS} ; Wait for specified time
    M104 S0 ; Turn off the nozzle heater
    RESPOND MSG="Filament change process finished"


[gcode_macro _MOTION_ENCODER_INSERTED]
description: Handle print process after motion encoder is triggered
gcode:
    RESPOND TYPE=echo MSG="The encoder motion received a filament insert event."

[gcode_macro _FILAMENT_RAN_OUT]
description: Pause print after runout detection and perform multiple purges after filament change
variable_purge_repetitions: 8 # Default number of purge repetitions
variable_purge_distance: 100 # Default purge distance
gcode:
    # Check if the printer is currently printing
    {% if printer.idle_timeout.state == "Printing" %}
        {% set PURGE_DISTANCE = params.PURGE_DISTANCE|default(printer["gcode_macro _FILAMENT_RAN_OUT"].purge_distance)|float %}
        {% set PURGE_REPETITIONS = params.PURGE_REPETITIONS|default(printer["gcode_macro _FILAMENT_RAN_OUT"].purge_repetitions)|int %}
        {% set last_temp = printer.extruder.target %}
        # Pause the print
        PLAY_SOUND SOUND=filament_ran_out
        RESPOND MSG="Filament runout detected. Pausing print."
        PAUSE
        # Heat up the nozzle to the last target temperature
        RESPOND MSG="Heating nozzle to last target temperature: {last_temp}°C"
        RESPOND MSG="Will purge filament once last temprature is reached."
        M109 S{last_temp}
        # Perform purge operation multiple times
        RESPOND MSG="For user friendlyness make sure purge distance is not to big to purge all filament."
        RESPOND MSG="Performing purge operation {PURGE_REPETITIONS} x {PURGE_DISTANCE}mm."
        {% for i in range(PURGE_REPETITIONS) %}
            RESPOND MSG="Purge operation {i+1} of {PURGE_REPETITIONS}"
            M83 # Relative positioning
            G1 E{PURGE_DISTANCE} F500
            G1 E-2 F500 # Small retraction to prevent oozing
        {% endfor %}
        # Disable the extruder stepper
        RESPOND MSG="Disabling extruder stepper"
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
        RESPOND MSG="Complete filament change and manually purge. Presss RESUME when ready."
    {% else %}
        RESPOND MSG="Filament runout detected, but printer is not actively printing. Ignoring."
    {% endif %}

[gcode_macro _FILAMENT_INSERTED]
description: Routine to handle filament insertion
gcode:
    # Check if printer is in a paused state or if temperature is above 200°C
    {% if printer.pause_resume.is_paused or printer.extruder.temperature > 190 %}
        PLAY_SOUND SOUND=filament_inserted
        RESPOND MSG="Filament inserted during active/paused print. Continuing with insertion process."
        
        RESPOND MSG="Disabling extruder stepper"
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

        {% set last_temp = printer.extruder.target %}

        # Start heating the nozzle immediately if it's not already at temperature
        M104 S{last_temp}  # Set target temperature without waiting

        # Ensure the nozzle has reached the insertion temperature
        RESPOND MSG="Waiting for nozzle to reach insertion temperature of {INSERT_TEMP}°C"
        M109 S{last_temp}
    {% else %}
        RESPOND MSG="Cold filament insertion detected. Ignoring no macro."
    {% endif %}

    RESPOND MSG="Disengaged extruder stepper, use gear on stepper to pull filament in if needed"

[gcode_macro _MOTION_ENCODER_TRIGGERED]
description: Placeholder for motion encoder events
gcode:
    RESPOND TYPE=echo MSG="Motion encoder event received"

[gcode_macro TUNE_NOZZLE_PID]
description: Runs calibration for PID values on extruder.
gcode:
    PLAY_SOUND SOUND=tuning_hotend_pid
    {% set TARGET_TEMP = printer["gcode_macro Lister"].nozzle_pid_temp|float %}
    RESPOND MSG="Starting nozzle PID tuning at {TARGET_TEMP}°C"
    PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
    RESPOND MSG="Nozzle PID tuning complete, saving configuration"
    SAVE_CONFIG

[gcode_macro TUNE_BED_PID]
description: Runs calibration for PID values on bed.
gcode:
    PLAY_SOUND SOUND=tuning_hotbed_pid
    {% set TARGET_TEMP = printer["gcode_macro Lister"].bed_pid_temp|default(60)|float %}
    RESPOND MSG="Starting bed PID tuning at {TARGET_TEMP}°C"
    PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
    RESPOND MSG="Bed PID tuning complete, saving configuration"
    SAVE_CONFIG

[gcode_macro TURN_ON_LIGHT]
description: Turns on the printer light
gcode:
    RESPOND MSG="Turning on light"
    SET_PIN PIN=light_led VALUE=1

[gcode_macro TURN_LOW_LIGHT]
description: Sets the printer light to low intensity
gcode:
    RESPOND MSG="Setting light to low intensity"
    SET_PIN PIN=light_led VALUE=.4

[gcode_macro TURN_OFF_LIGHT]
description: Turns off the printer light
gcode:
    RESPOND MSG="Turning off light"
    SET_PIN PIN=light_led VALUE=0

[gcode_macro MEASURE_Z_HEIGHT]
description: Calculate, set Z offset based on probing, and save true max height with a calibration count
variable_calibration_count: 0
gcode:
    PLAY_SOUND SOUND=measuring_z_height
    # First try to get the saved probe_z_offset, if not available use the config value
    {% set saved_probe_z_offset = printer.save_variables.variables.get('probe_z_offset', None) %}
    {% if saved_probe_z_offset is not none %}
        {% set PROBE_Z_OFFSET = saved_probe_z_offset|float %}
        RESPOND MSG="Using saved probe Z offset: {PROBE_Z_OFFSET}"
    {% else %}
        {% set PROBE_Z_OFFSET = printer.configfile.settings['probe']['z_offset']|float %}
        RESPOND MSG="No saved probe Z offset found, using config value: {PROBE_Z_OFFSET}"
    {% endif %}

    {% set EXPECTED_MAX = printer.configfile.settings['stepper_z']['position_max']|float %}
    {% set MEASURED_Z = printer.probe.last_z_result %}
    {% set CALCULATED_OFFSET = MEASURED_Z - PROBE_Z_OFFSET %}
    {% set TRUE_MAX_HEIGHT = EXPECTED_MAX - CALCULATED_OFFSET %}

    # Get current count and increment it
    {% set current_count = printer["gcode_macro MEASURE_Z_HEIGHT"].calibration_count %}
    SET_GCODE_VARIABLE MACRO=MEASURE_Z_HEIGHT VARIABLE=calibration_count VALUE={ current_count + 1 }
    SET_GCODE_VARIABLE MACRO=Lister VARIABLE=park_z VALUE={TRUE_MAX_HEIGHT}

    SAVE_VARIABLE VARIABLE=z_offset VALUE={CALCULATED_OFFSET}
    SAVE_VARIABLE VARIABLE=true_max_height VALUE={TRUE_MAX_HEIGHT}
    SAVE_VARIABLE VARIABLE=calibration_count VALUE={ current_count + 1 }

    UPDATE_PARK_Z  # Update park_z with new true_max_height

    RESPOND MSG="Z offset calculated: {CALCULATED_OFFSET}"
    RESPOND MSG="True maximum Z height: {TRUE_MAX_HEIGHT}"
    RESPOND MSG="Calibration count: { current_count + 1 }"
    RESPOND MSG="This offset will be applied automatically after homing."

[gcode_macro _APPLY_SAVED_Z_HEIGHT]
description: Apply the saved true max Z height after homing or calibrate if not available
gcode:
    PLAY_SOUND SOUND=applied_saved_z_height
    {% if 'z' in printer.toolhead.homed_axes %}
        {% set saved_z = printer.save_variables.variables.get('true_max_height', None) %}
        {% if saved_z is not none %}
            {% set x_y_homed = 'x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes %}
            {% set saved_z = printer.save_variables.variables.true_max_height|float %}
            SET_KINEMATIC_POSITION Z={saved_z}
            SET_GCODE_VARIABLE MACRO=Lister VARIABLE=park_z VALUE={saved_z}
            RESPOND MSG="Applied saved Z height: {saved_z}mm"
            {% if not x_y_homed %}
                # Recover from faulty X and Y from SET_KINEMATIC_POSITION
                G28 X0 Y0
            {% endif %}
        {% else %}
            RESPOND MSG="No saved Z height found. Running calibration..."
            CALIBRATE_Z_HEIGHT
            {% set saved_z = printer.save_variables.variables.true_max_height|float %}
            RESPOND MSG="Calibration complete. Applied new Z height: {saved_z}mm"
        {% endif %}
    {% else %}
        RESPOND MSG="Z axis not homed. Please home Z first."
    {% endif %}

[gcode_macro Z_HEIGHT_PROBE]
description: Perform Z homing and probing
gcode:
    RESPOND MSG="Starting Z height calibration - Probing stage"
    MAYBE_HOME

    G90    # Absolute positioning
    G1 X0 Y-15 Z20 F3000  # Move to center of bed and slightly up
    PROBE X=0 Y=-15 # Perform probing
    RESPOND MSG="Probing complete"

[gcode_macro MAYBE_CALIBRATE_Z_HEIGHT]
description: Run Z height calibration if calibration count exceeds 5
gcode:
    {% set calibration_count = printer.save_variables.variables.get('calibration_count', 0)|int %}
    
    RESPOND MSG="Current calibration count: {calibration_count}"
    
    {% if calibration_count > 5 %}
        RESPOND MSG="Calibration count exceeds 5. Running Z height calibration..."
        CALIBRATE_Z_HEIGHT
    {% else %}
        RESPOND MSG="Calibration count is 5 or less. Skipping Z height calibration."
    {% endif %}

[gcode_macro CALIBRATE_Z_HEIGHT]
description: Main macro to run full Z height calibration
gcode:
    {% set EXPECTED_MAX = printer.configfile.settings['stepper_z']['position_max']|float %}
    PLAY_SOUND SOUND=calibrate_z_height
    BED_MESH_CLEAR
    SAVE_VARIABLE VARIABLE=z_offset VALUE=0
    SAVE_VARIABLE VARIABLE=true_max_height VALUE={EXPECTED_MAX}
    SAVE_VARIABLE VARIABLE=calibration_count VALUE=0

    ; Clear any existing offset before probing
    {% set CURRENT_Z_OFFSET = printer.gcode_move.homing_origin.z %}
    RESPOND MSG="Current Z offset before calibration: {CURRENT_Z_OFFSET}"
    SET_GCODE_OFFSET Z=0
    RESPOND MSG="Current Z offset before calibration: {CURRENT_Z_OFFSET}"
    G90
    G28 Z F3000 # Home Z
    G4 P1000  # Wait for 1 second

    Z_HEIGHT_PROBE
    G4 P1000  # Wait for 1 second
    MEASURE_Z_HEIGHT
    G28 Z F3000 # Home Z